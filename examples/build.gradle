group 'net.andreho'
version '0.0.1'

project.ext {
  aspectjVersion = "1.8.11"
}

buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven {
      url "https://maven.eveoh.nl/content/repositories/releases"
    }
  }
  dependencies {
    classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.5"
    classpath "nl.eveoh:gradle-aspectj:2.0"
  }
}

apply plugin: 'application'
apply plugin: 'aspectj'
apply plugin: 'me.champeau.gradle.jmh'

mainClassName = 'examples.Main'

compileAspect {
  additionalAjcArgs = ['debug' : '']
  xlint = 'warning'
  maxmem = '1024m'
}

dependencies {

  compile project(':main')
  compile project(':agent')
  compile project(':resources')
  compile 'org.ow2.asm:asm-all:5.2'

  compile 'org.openjdk.jmh:jmh-core:1.19'
  compile 'org.openjdk.jmh:jmh-generator-annprocess:1.19'

  compile 'org.hibernate:hibernate-core:5.2.12.Final'
  compile 'com.h2database:h2:1.4.196'

  compile group: 'org.javassist', name: 'javassist', version: '3.21.0-GA'
  compile group: 'org.apache.bcel', name: 'bcel', version: '6.1'
  compile group: 'net.bytebuddy', name: 'byte-buddy', version: '1.7.5'

  compile "org.aspectj:aspectjrt:${aspectjVersion}"
  compile "org.aspectj:aspectjweaver:${aspectjVersion}"
  //aspectpath "org.aspectj:aspectjtools:${aspectjVersion}"
}

tasks.getByName('jmhJar').doFirst() {duplicatesStrategy(DuplicatesStrategy.EXCLUDE)}

jmh {
  include = ['.*AsmCoreApiBenchmark.*']
  //iterations = 10 // Number of measurement iterations to do.
  //benchmarkMode = ['thrpt','avgt'] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
  //batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
  //fork = 0 // How many times to forks a single benchmark. Use 0 to disable forking altogether
  //failOnError = true // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
  //forceGC = false // Should JMH force GC between iterations?
  //jvm = 'myjvm' // Custom JVM to use when forking.
  //jvmArgs = ['Custom JVM args to use when forking.']
  //jvmArgs = ['-Djmh.ignoreLock=true']
  //jvmArgsAppend = ['Custom JVM args to use when forking (append these)']
  //jvmArgsPrepend =[ 'Custom JVM args to use when forking (prepend these)']
  humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
  resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
  //operationsPerInvocation = 1 // Operations per invocation.
  //benchmarkParameters =  [:] // Benchmark parameters.
  //profilers = [] // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]
  //timeOnIteration = '1s' // Time to spend at each measurement iteration.
  //resultFormat = 'CSV' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
  //synchronizeIterations = false // Synchronize iterations?
  //threads = 1 // Number of worker threads to run with.
  //threadGroups = [2,3,4] //Override thread group distribution for asymmetric benchmarks.
  //timeout = '500ms' // Timeout for benchmark iteration.
  //timeUnit = 'us' // Output time unit. Available time units are: [m, s, ms, us, ns].
  //verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
  //warmup = '3s' // Time to spend at each warmup iteration.
  //warmupBatchSize = 10 // Warmup batch size: number of benchmark method calls per operation.
  //warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
  //warmupIterations = 1 // Number of warmup iterations to do.
  //warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
  //warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.

  zip64 = true // Use ZIP64 format for bigger archives
  jmhVersion = '1.19' // Specifies JMH version
  //includeTests = false // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
  duplicateClassesStrategy = 'warn' // Strategy to apply when encountring duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)
}